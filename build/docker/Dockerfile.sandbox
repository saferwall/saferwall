################################
# STEP 1 build executable binary
################################

FROM golang:1.18-alpine AS build-stage

ARG GITHUB_USER
ARG GITHUB_TOKEN

ENV RELEASE_VERSION=v0.6.0
ENV ARTIFACT_NAME=sandbox-${RELEASE_VERSION}.zip
ENV REPO_URL=https://github.com/saferwall/saferwall-sandbox
ENV YARA_VERSION=4.3.2
ENV YARA_ARCHIVE=$YARA_VERSION.tar.gz
ENV YARA_DOWNLOAD_URL=https://github.com/VirusTotal/yara/archive/v$YARA_ARCHIVE
ENV YARA_RULES_REPO=https://github.com/saferwall/yara-rules.git

# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
RUN apk update && apk add --no-cache git ca-certificates tzdata \
	&& update-ca-certificates 2>/dev/null || true

# Install Yara as sandbox service depends on it.
RUN apk add --no-cache libressl-dev glib-dev autoconf automake libtool build-base \
	&& wget $YARA_DOWNLOAD_URL \
	&& tar zxvf v$YARA_ARCHIVE \
	&& cd ./yara-$YARA_VERSION \
	&& ./bootstrap.sh \
	&& ./configure \
	&& make \
	&& make install \
	&& git clone ${YARA_RULES_REPO} /rules

# Set the Current Working Directory inside the container.
WORKDIR $GOPATH/src/saferwall/sandbox/

# Copy go mod and sum files.
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod
# and go.sum files are not changed.
RUN go mod download

# Copy our go files.
COPY . .

# Build the binary.
RUN export YARA_SRC=$PWD/yara-$YARA_VERSION \
	&& GOOS=linux GOARCH=amd64 \
	go build -a -installsuffix cgo -ldflags '-extldflags "-static"' \
	-tags yara_static -o /go/bin/sandbox-svc cmd/services/sandbox/main.go

# Build the agent binary.
RUN CGO_ENABLED=0 GOOS=windows GOARCH=amd64 \
	go build -a -installsuffix cgo -ldflags '-extldflags "-static"' \
	-o /go/bin/agent.exe cmd/agent/server/main.go

# Download fetch.
ADD https://github.com/gruntwork-io/fetch/releases/download/v0.4.6/fetch_linux_amd64 fetch
RUN chmod +x fetch

# Download the sandbox components files.
RUN GITHUB_OAUTH_TOKEN="${GITHUB_TOKEN}" ./fetch \
	--repo="${REPO_URL}" \
	--tag="${RELEASE_VERSION}" \
	--release-asset="${ARTIFACT_NAME}" /

############################
# STEP 2 build a small image
############################

FROM alpine:latest
LABEL maintainer="https://github.com/saferwall"
LABEL version="0.5.0"
LABEL description="Sandbox scan service"

ENV USER saferwall
ENV GROUP saferwall
ENV RELEASE_VERSION=v0.6.0
ENV ARTIFACT_NAME=sandbox-${RELEASE_VERSION}.zip
ENV ENGLISH_DICT_URL https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt

# Set the Current Working Directory inside the container.
WORKDIR /saferwall

# Copy our static executable.
COPY --from=build-stage /go/bin/sandbox-svc .

# Copy the VM agent.
COPY --from=build-stage /go/bin/agent.exe .

# Copy the sandbox zip package.
COPY --from=build-stage ${ARTIFACT_NAME} package.zip

# Copy the yara rules.
COPY --from=build-stage /rules rules/

# Download english dictionary
ADD ${ENGLISH_DICT_URL} words.txt

# Copy the config files.
COPY configs/services/sandbox/ conf/

# Copy the SSH private key used for accessing the remote  libvirt RPC server.
COPY build/data/id_rsa .

# Create an app user so our program doesn't run as root.
RUN addgroup -g 102 -S $GROUP \
	&& adduser -u 101 -S $USER -G $GROUP \
	&& chown -R $USER:$GROUP /saferwall

# Switch to our user.
USER saferwall

ENTRYPOINT ["/saferwall/sandbox-svc", "-config", "/saferwall/conf"]
